package com.mycompany.uibscraper;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.CardLayout;
import java.awt.GridLayout;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import java.time.Duration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.TreeMap;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;

/**
 *
 * @author nahu
 */
public class UibScraper extends javax.swing.JFrame {

    public static TreeMap<String, Alojamiento> alojamientos;

    private CardLayout cardLayout;

    /**
     * Creates new form UibScraper
     */
    public UibScraper() {
        initComponents();
        cardLayout = (CardLayout) getContentPane().getLayout();

        SwingUtilities.invokeLater(() -> {
            MyTask task = new MyTask();
            task.execute();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadingPanel = new javax.swing.JPanel();
        loadingBar = new javax.swing.JProgressBar();
        mainPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        alojamientosPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout(0, 2));

        javax.swing.GroupLayout loadingPanelLayout = new javax.swing.GroupLayout(loadingPanel);
        loadingPanel.setLayout(loadingPanelLayout);
        loadingPanelLayout.setHorizontalGroup(
            loadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadingBar, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                .addContainerGap())
        );
        loadingPanelLayout.setVerticalGroup(
            loadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadingPanelLayout.createSequentialGroup()
                .addContainerGap(454, Short.MAX_VALUE)
                .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(loadingPanel, "card3");

        mainPanel.setName(""); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Alojamientos UIB");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(16);

        alojamientosPanel.setLayout(new java.awt.GridLayout(1, 1));
        jScrollPane1.setViewportView(alojamientosPanel);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(mainPanel, "mainPanel");
        mainPanel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        FlatDarkLaf.setup();
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UibScraper().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel alojamientosPanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JPanel loadingPanel;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    // <editor-fold defaultstate="collapsed" desc="Scrapping Task"> 
    public class MyTask extends SwingWorker<TreeMap<String, Alojamiento>, Void> {

        @Override
        protected TreeMap<String, Alojamiento> doInBackground() throws Exception {
            TreeMap<String, Alojamiento> alojamientos = GestorAlojamientos.cargarAlojamientos();
            loadingBar.setValue(10);
            LinkedList<Alojamiento> lista = source();

            GestorAlojamientos.merge(alojamientos, lista);
            GestorAlojamientos.guardarAlojamientos(alojamientos);
            loadingBar.setValue(100);
            cardLayout.show(getContentPane(), "mainPanel");
            logic(alojamientos);
            return alojamientos;
        }

        @Override
        protected void done() {
            try {
                alojamientos = get();
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }
    }

    public LinkedList<Alojamiento> source() {
        LinkedList<Alojamiento> fullList = new LinkedList();
        // Set the path to ChromeDriver
        System.setProperty("webdriver.chrome.driver", "C:\\Users\\nahu\\Documents\\NetBeansProjects\\UibScraper\\chromedriver-win64\\chromedriver.exe");
        System.setProperty("webdriver.chrome.logfile", "C:\\Users\\nahu\\Documents\\NetBeansProjects\\UibScraper\\chromedriver-win64\\chromedriver.log");
        System.setProperty("webdriver.chrome.verboseLogging", "true");

        ChromeOptions options = new ChromeOptions();

        options.addArguments("--remote-allow-origins=*");
        options.addArguments("--rverbose");
        options.addArguments("--disable-gpu");
        options.addArguments("--headless");
        // Add any necessary options here
        WebDriver driver = new ChromeDriver(options);

        try {
            driver.get("https://www.uib.es/es/taulers/habitatge/");

            // Wait for JavaScript to load
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement nextPageButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("a.pagination-link.pagination-next")));

            boolean state = false;
            while (!(nextPageButton.getAttribute("disabled") != null && state)) {
                state = nextPageButton.getAttribute("disabled") != null;

                loadingBar.setValue((100 - loadingBar.getValue()) / 2 + loadingBar.getValue());

                String pageSource = driver.getPageSource();
                parseHtml(pageSource, fullList);

                nextPageButton.click();
                // Add a short delay to avoid excessive load
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            driver.quit();
        }

        return fullList;
    }

    private LinkedList<Alojamiento> parseHtml(String html, LinkedList<Alojamiento> lista) {

        Document document = Jsoup.parse(html);

        Elements tdElements = document.select("td[data-label='Anunci']");
        int N = 10; // Adjust N as needed

        for (int i = 0; i < Math.min(N, tdElements.size()); i++) {
            Element td = tdElements.get(i);
            String title = td.select("div > strong").first().text();
            String description = td.select("div:nth-of-type(2)").text();

            Element div3 = td.selectFirst("div:nth-of-type(3)");
            String name = rightAfterStrong(div3, 0);
            String telephone = div3.select("span.contacte").text().trim();
            if (telephone.startsWith("+34")) {
                telephone = telephone.substring(3).trim();
            }

            Element div3div = td.selectFirst("div > span > p");
            String price = rightAfterStrong(div3div, 0);
            String address = rightAfterStrong(div3div, 1);
            lista.add(new Alojamiento(telephone, title, description, name, false, price, address, true));
        }

        return lista;
    }

    private String rightAfterStrong(Element parent, int i) {
        try {
            Element strongElement = parent.select("strong").get(i);
            String text = "";
            if (strongElement != null) {
                TextNode nextTextNode = (TextNode) strongElement.nextSibling();
                if (nextTextNode != null) {
                    text = nextTextNode.text().trim();
                }
            }
            return text;
        } catch (Exception e) {
        }
        return "";
    }

    // </editor-fold>   
    public void logic(TreeMap<String, Alojamiento> alojamientos) {
        loadAlojamientos(alojamientos);
    }

    public void loadAlojamientos(TreeMap<String, Alojamiento> alojamientos) {
        ((GridLayout) alojamientosPanel.getLayout()).setRows(alojamientos.size());

        Iterator<Alojamiento> iterator = alojamientos.values().iterator();
        int i = 0;
        while (iterator.hasNext()) {
            Alojamiento alojamiento = iterator.next();
            if (!alojamiento.isEliminado()) {
                alojamientosPanel.add(new LineaAlojamiento(alojamiento));
            }
        }
    }
}
